'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _keycode = require('keycode');

var _keycode2 = _interopRequireDefault(_keycode);

var _customPropTypes = require('../utils/customPropTypes');

var _customPropTypes2 = _interopRequireDefault(_customPropTypes);

var _SelectFieldInput = require('./SelectFieldInput');

var _SelectFieldInput2 = _interopRequireDefault(_SelectFieldInput);

var _FormControl = require('../Form/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _InputLabel = require('../Input/InputLabel');

var _InputLabel2 = _interopRequireDefault(_InputLabel);

var _Input = require('../Input/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Menu = require('../Menu/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OPEN_MENU_KEYS = ['enter', 'space', 'up', 'down'];

/**
 * ```jsx
 * <SelectField />
 * ```
 */
//  weak

var SelectField = function (_Component) {
  (0, _inherits3.default)(SelectField, _Component);

  function SelectField() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, SelectField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      anchorEl: undefined,
      ignoreFocusOnce: false,
      open: false,
      selectedIndex: undefined
    }, _this.handleMouseDown = function (event) {
      return event.preventDefault();
    }, _this.handleKeyDown = function (event) {
      if (OPEN_MENU_KEYS.includes((0, _keycode2.default)(event))) {
        event.preventDefault();
        _this.setState({ open: true, anchorEl: event.currentTarget });
      }
    }, _this.handleClick = function (event) {
      event.currentTarget.focus();
      _this.setState({ open: true, anchorEl: event.currentTarget });
    }, _this.handleRequestClose = function () {
      return _this.setState({ open: false });
    }, _this.handleSelectFocus = function (event) {
      if (_this.state.ignoreFocusOnce) {
        event.stopPropagation();
        _this.setState({ ignoreFocusOnce: false });
      }
    }, _this.handleSelectBlur = function (event) {
      if (_this.state.open) {
        event.stopPropagation();
      }
    }, _this.handleItemClick = function (event, index, value) {
      event.persist();

      _this.setState({ open: false, ignoreFocusOnce: true }, function () {
        if (_this.props.onChange) {
          _this.props.onChange(event, index, value);
        }
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(SelectField, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          compareFunction = _props.compareFunction,
          disabled = _props.disabled,
          error = _props.error,
          hideLabel = _props.hideLabel,
          inputClassName = _props.inputClassName,
          inputPropsProp = _props.inputProps,
          InputProps = _props.InputProps,
          label = _props.label,
          labelClassName = _props.labelClassName,
          onChange = _props.onChange,
          menuClassName = _props.menuClassName,
          menuProps = _props.menuProps,
          required = _props.required,
          type = _props.type,
          value = _props.value,
          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'className', 'compareFunction', 'disabled', 'error', 'hideLabel', 'inputClassName', 'inputProps', 'InputProps', 'label', 'labelClassName', 'onChange', 'menuClassName', 'menuProps', 'required', 'type', 'value']);

      var initialShrink = value !== '' && typeof value !== 'undefined';

      var inputProps = (0, _extends3.default)({
        onClick: this.handleClick,
        onMouseDown: this.handleMouseDown,
        onSelectFocus: this.handleSelectFocus,
        onSelectBlur: this.handleSelectBlur,
        options: children
      }, inputPropsProp);

      return _react2.default.createElement(
        _FormControl2.default,
        (0, _extends3.default)({ className: className, error: error, required: required }, other),
        label && !(hideLabel && value) && _react2.default.createElement(
          _InputLabel2.default,
          { className: labelClassName, shrink: initialShrink },
          label
        ),
        _react2.default.createElement(_Input2.default, (0, _extends3.default)({
          className: inputClassName,
          value: value,
          type: type,
          disabled: disabled,
          onKeyDown: this.handleKeyDown,
          component: _SelectFieldInput2.default,
          label: label,
          inputProps: inputProps
        }, InputProps)),
        _react2.default.createElement(
          _Menu2.default,
          (0, _extends3.default)({
            anchorEl: this.state.anchorEl,
            className: menuClassName,
            open: this.state.open,
            onRequestClose: this.handleRequestClose
          }, menuProps),
          _react2.default.Children.map(children, function (child, index) {
            if (typeof child.props.value === 'undefined') {
              return child;
            }
            return _react2.default.cloneElement(child, {
              selected: compareFunction(value, child.props.value),
              onClick: function onClick(event) {
                return _this2.handleItemClick(event, index, child.props.value);
              }
            });
          })
        )
      );
    }
  }]);
  return SelectField;
}(_react.Component);

SelectField.defaultProps = {
  compareFunction: function compareFunction(currentValue, itemValue) {
    return currentValue === itemValue;
  },
  disabled: false
};
SelectField.contextTypes = {
  styleManager: _customPropTypes2.default.muiRequired
};
SelectField.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * The `MenuItem` elements to populate the select field with.
   */
  children: _propTypes2.default.node,
  /**
   * The CSS class name of the root element.
   */
  className: _propTypes2.default.string,
  /**
   * Custom compare function.
   */
  compareFunction: _propTypes2.default.func,
  /**
   * If `true`, the select field will be disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Whether the label should be displayed in an error state.
   */
  error: _propTypes2.default.bool,
  /**
   * Whether the label should be hidden when option is selected.
   */
  hideLabel: _propTypes2.default.bool,
  /*
   * @ignore
   */
  id: _propTypes2.default.string,
  /**
   * The CSS class name of the input element.
   */
  inputClassName: _propTypes2.default.string,
  /**
   * Passed as `inputProps` to the internal `<Input />` component.
   */
  inputProps: _propTypes2.default.object,
  /**
   * Properties applied to the internal `<Input />` component.
   */
  InputProps: _propTypes2.default.object,
  /**
   * The label text.
   */
  label: _propTypes2.default.node,
  /**
   * The CSS class name of the label element.
   */
  labelClassName: _propTypes2.default.string,
  /**
   * The CSS class name of the `Menu` element.
   */
  menuClassName: _propTypes2.default.string,
  /**
   * Properties applied to the internal `<Menu />` component.
   */
  menuProps: _propTypes2.default.object,
  /** @ignore */
  onBlur: _propTypes2.default.func,
  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event TouchTap event targeting the menu item
   * that was selected.
   * @param {number} key The index of the selected menu item.
   * @param {any} payload The `value` prop of the selected menu item.
   */
  onChange: _propTypes2.default.func,
  /** @ignore */
  onFocus: _propTypes2.default.func,
  /**
   * Whether the label should be displayed as required (asterisk).
   */
  required: _propTypes2.default.bool,
  /**
   * Type of the input element. It should be a valid HTML5 input type.
   */
  type: _propTypes2.default.string,
  /**
   * The input value, required for a controlled component.
   */
  value: _propTypes2.default.any
} : {};
exports.default = SelectField;